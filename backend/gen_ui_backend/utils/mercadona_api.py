"""
Utilidades para interactuar con la API de Mercadona.
Funciones auxiliares para b√∫squeda, normalizaci√≥n y procesamiento de datos.
"""

import requests
import unicodedata
import time
from typing import Dict, List, Optional, Any


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# CONFIGURACI√ìN Y CONSTANTES
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

BASE_URL = "https://tienda.mercadona.es/api/"
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
    "Accept": "application/json"
}
REQUEST_DELAY = 0.3  # segundos entre peticiones


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# FUNCIONES AUXILIARES
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def normalizar_nombre(nombre: str) -> str:
    """
    Normaliza un nombre eliminando tildes y convirtiendo a min√∫sculas.
    
    Args:
        nombre: Texto a normalizar
        
    Returns:
        Texto normalizado en min√∫sculas sin tildes
    """
    if not nombre:
        return ""
    
    nombre = nombre.lower().strip()
    # Eliminar tildes usando Unicode
    nombre = ''.join(
        c for c in unicodedata.normalize('NFD', nombre)
        if unicodedata.category(c) != 'Mn'
    )
    return nombre


def hacer_peticion_api(url: str, timeout: int = 10) -> Optional[Dict]:
    """
    Realiza una petici√≥n GET a la API de Mercadona con manejo de errores.
    
    Args:
        url: URL completa a la que hacer la petici√≥n
        timeout: Tiempo m√°ximo de espera en segundos
        
    Returns:
        Diccionario con la respuesta JSON o None si hay error
    """
    try:
        time.sleep(REQUEST_DELAY)
        response = requests.get(url, headers=HEADERS, timeout=timeout)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error en petici√≥n a {url}: {e}")
        return None


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# FUNCIONES DE B√öSQUEDA Y PROCESAMIENTO
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def crear_diccionario_categorias() -> Dict[str, int]:
    """
    Se conecta a la API de Mercadona y extrae todas las categor√≠as y subcategor√≠as.
    
    Crea un diccionario que mapea nombres de categor√≠as (originales y normalizados)
    a sus IDs de la API de Mercadona.
    
    Returns:
        Diccionario con formato {nombre_categoria: id_categoria}
        Incluye tanto nombres originales como normalizados para b√∫squeda flexible.
        
    Example:
        >>> categorias = crear_diccionario_categorias()
        >>> print(categorias["carne"])
        3
        >>> print(categorias["Carne"])
        3
    """
    categorias_dict = {}
    
    # Obtener categor√≠as principales
    url_categorias = f"{BASE_URL}categories/"
    data = hacer_peticion_api(url_categorias)
    
    if not data or "results" not in data:
        print("Error: No se pudieron obtener las categor√≠as principales")
        return categorias_dict
    
    categorias_principales = data["results"]
    print(f"‚úÖ Obtenidas {len(categorias_principales)} categor√≠as principales")
    
    # Recorrer cada categor√≠a principal
    for categoria in categorias_principales:
        cat_id = categoria.get("id")
        cat_nombre = categoria.get("name")
        
        if not cat_id or not cat_nombre:
            continue
        
        # Guardar categor√≠a principal (original y normalizada)
        cat_nombre_norm = normalizar_nombre(cat_nombre)
        categorias_dict[cat_nombre] = cat_id
        categorias_dict[cat_nombre_norm] = cat_id
        
        # Las subcategor√≠as ya vienen en la respuesta inicial
        # No hay que hacer peticiones adicionales
        if "categories" not in categoria:
            continue
        
        # Procesar subcategor√≠as que ya est√°n en la respuesta
        for subcat in categoria["categories"]:
            subcat_id = subcat.get("id")
            subcat_nombre = subcat.get("name")
            
            if not subcat_id or not subcat_nombre:
                continue
            
            # Guardar subcategor√≠a (original y normalizada)
            subcat_nombre_norm = normalizar_nombre(subcat_nombre)
            categorias_dict[subcat_nombre] = subcat_id
            categorias_dict[subcat_nombre_norm] = subcat_id
    
    print(f"‚úÖ Diccionario creado con {len(categorias_dict)} entradas")
    return categorias_dict


def encontrar_numero_categoria(productos: List[str], diccionario_categorias: Optional[Dict[str, int]] = None) -> List[int]:
    """
    Encuentra los IDs de categor√≠as cuyos nombres coinciden con los productos.
    
    Busca en el diccionario de categor√≠as aquellas que contengan los nombres
    de productos especificados. √ötil para determinar d√≥nde buscar productos espec√≠ficos.
    
    Args:
        productos: Lista de nombres de productos a buscar (ej: ["leche", "pan", "huevos"])
        diccionario_categorias: Diccionario opcional con mapeo nombre->ID.
                               Si no se proporciona, se crea uno nuevo.
        
    Returns:
        Lista de IDs de categor√≠as encontradas (sin duplicados)
        
    Example:
        >>> categorias_dict = crear_diccionario_categorias()
        >>> ids = encontrar_numero_categoria(["leche", "pan"], categorias_dict)
        >>> print(ids)
        [6, 5]
    """
    if diccionario_categorias is None:
        print("‚ö†Ô∏è No se proporcion√≥ diccionario, creando uno nuevo...")
        diccionario_categorias = crear_diccionario_categorias()
    
    if not diccionario_categorias:
        print("‚ùå Error: No se pudo crear el diccionario de categor√≠as")
        return []
    
    categorias_ids = set()  # Usar set para evitar duplicados
    
    for producto in productos:
        if not producto:
            continue
        
        producto_norm = normalizar_nombre(producto)
        
        # Buscar en el diccionario
        for nombre_cat, cat_id in diccionario_categorias.items():
            nombre_cat_norm = normalizar_nombre(str(nombre_cat))
            
            # Si el nombre del producto est√° contenido en el nombre de la categor√≠a
            if producto_norm in nombre_cat_norm:
                categorias_ids.add(cat_id)
                print(f"‚úÖ '{producto}' encontrado en categor√≠a ID: {cat_id}")
    
    return list(categorias_ids)


def extraer_productos_de_categoria(categorias: List[int]) -> List[Dict[str, Any]]:
    """
    Extrae todos los productos de las categor√≠as especificadas.
    
    Consulta la API de Mercadona para obtener todos los productos dentro de
    las categor√≠as dadas, incluyendo informaci√≥n de precios y detalles.
    
    Args:
        categorias: Lista de IDs de categor√≠as/subcategor√≠as de las que extraer productos
        
    Returns:
        Lista de diccionarios con informaci√≥n de productos. Cada producto contiene:
        - id: ID del producto
        - nombre: Nombre para mostrar
        - packaging: Informaci√≥n de empaquetado
        - precio_unidad: Precio por unidad
        - precio_bulk: Precio alternativo
        - precio_referencia: Precio de referencia (ej: ‚Ç¨/kg)
        - categoria_id: ID de la categor√≠a que lo contiene
        
    Example:
        >>> productos = extraer_productos_de_categoria([3, 6])
        >>> print(len(productos))
        125
        >>> print(productos[0]["nombre"])
        'Leche semidesnatada Hacendado'
    """
    productos_mercadona = []
    productos_unicos = set()  # Para evitar duplicados por ID
    
    # Obtener todas las categor√≠as con sus subcategor√≠as
    url_categorias = f"{BASE_URL}categories/"
    data = hacer_peticion_api(url_categorias)
    
    if not data or "results" not in data:
        print("‚ùå Error: No se pudieron obtener las categor√≠as")
        return productos_mercadona
    
    categorias_principales = data["results"]
    
    # Procesar cada categor√≠a principal
    for categoria in categorias_principales:
        cat_id = categoria.get("id")
        
        if "categories" not in categoria:
            continue
        
        # Verificar si alguna subcategor√≠a o la categor√≠a principal est√° en la lista solicitada
        tiene_productos_para_extraer = False
        
        # Procesar subcategor√≠as que vienen en la respuesta
        for subcat in categoria["categories"]:
            subcat_id = subcat.get("id")
            
            # Si la subcategor√≠a est√° en la lista solicitada O la categor√≠a padre est√° en la lista
            if subcat_id in categorias or cat_id in categorias:
                if not tiene_productos_para_extraer:
                    print(f"üîç Procesando categor√≠a ID: {cat_id} - {categoria.get('name')}")
                    tiene_productos_para_extraer = True
                
                # Las subcategor√≠as NO incluyen productos directamente
                # Hay que hacer una petici√≥n a cada subcategor√≠a para obtener sus sub-subcategor√≠as con productos
                print(f"   üîé Obteniendo productos de '{subcat.get('name')}' (ID: {subcat_id})...")
                
                subcat_url = f"{BASE_URL}categories/{subcat_id}"
                subcat_data = hacer_peticion_api(subcat_url)
                
                if not subcat_data or "categories" not in subcat_data:
                    print("      ‚ö†Ô∏è  No se pudieron obtener sub-subcategor√≠as")
                    continue
                
                # Ahora S√ç tenemos las sub-subcategor√≠as con productos
                for sub_subcat in subcat_data["categories"]:
                    if "products" not in sub_subcat:
                        continue
                    
                    productos = sub_subcat.get("products", [])
                    print(f"      üì¶ {sub_subcat.get('name')}: {len(productos)} productos")
                    
                    for producto in productos:
                        producto_id = producto.get("id")
                        
                        # Evitar duplicados
                        if not producto_id or producto_id in productos_unicos:
                            continue
                        
                        # Extraer informaci√≥n del producto
                        price_info = producto.get("price_instructions", {})
                        
                        producto_info = {
                            "id": producto_id,
                            "nombre": producto.get("display_name", ""),
                            "packaging": producto.get("packaging", ""),
                            "precio_unidad": price_info.get("unit_price", 0),
                            "precio_bulk": price_info.get("bulk_price", ""),
                            "precio_referencia": price_info.get("reference_price", ""),
                            "formato_referencia": price_info.get("reference_format", ""),
                            "categoria_id": cat_id,
                            "categoria_nombre": categoria.get("name", ""),
                            "subcategoria_id": subcat_id,
                            "subcategoria_nombre": subcat.get("name", ""),
                            "sub_subcategoria_id": sub_subcat.get("id"),
                            "sub_subcategoria_nombre": sub_subcat.get("name", "")
                        }
                        
                        productos_mercadona.append(producto_info)
                        productos_unicos.add(producto_id)
    
    print(f"‚úÖ Total de productos extra√≠dos: {len(productos_mercadona)}")
    return productos_mercadona


def mostrar_productos_seleccionados(productos_mercadona: List[Dict[str, Any]], productos_buscados: List[str]) -> List[Dict[str, Any]]:
    """
    Encuentra productos que coincidan con los nombres buscados y selecciona el m√°s barato.
    
    Para cada producto buscado, encuentra todas las coincidencias en la lista de
    productos de Mercadona y devuelve el de menor precio.
    
    Args:
        productos_mercadona: Lista de productos extra√≠dos de Mercadona
        productos_buscados: Lista de nombres de productos a buscar
        
    Returns:
        Lista de productos seleccionados (el m√°s barato de cada coincidencia).
        Cada producto incluye toda su informaci√≥n m√°s un campo "producto_buscado"
        que indica qu√© t√©rmino de b√∫squeda coincidi√≥.
        
    Example:
        >>> productos = extraer_productos_de_categoria([6])
        >>> seleccionados = mostrar_productos_seleccionados(productos, ["leche"])
        >>> print(seleccionados[0]["nombre"])
        'Leche semidesnatada Hacendado'
        >>> print(seleccionados[0]["precio_unidad"])
        0.59
    """
    productos_seleccionados = []
    
    for producto_buscado in productos_buscados:
        if not producto_buscado:
            continue
        
        producto_buscado_norm = normalizar_nombre(producto_buscado)
        coincidencias = []
        
        # Buscar todas las coincidencias
        for producto in productos_mercadona:
            nombre_producto = producto.get("nombre", "")
            nombre_norm = normalizar_nombre(nombre_producto)
            
            # Si el t√©rmino buscado est√° en el nombre del producto
            if producto_buscado_norm in nombre_norm:
                coincidencias.append(producto)
        
        if not coincidencias:
            print(f"‚ö†Ô∏è No se encontraron productos para: '{producto_buscado}'")
            continue
        
        # Seleccionar el m√°s barato
        producto_mas_barato = min(
            coincidencias, 
            key=lambda p: float(p.get("precio_unidad", float('inf')))
        )
        
        # A√±adir informaci√≥n de b√∫squeda
        producto_seleccionado = producto_mas_barato.copy()
        producto_seleccionado["producto_buscado"] = producto_buscado
        producto_seleccionado["total_coincidencias"] = len(coincidencias)
        
        productos_seleccionados.append(producto_seleccionado)
        
        print(f"‚úÖ '{producto_buscado}': {producto_mas_barato['nombre']} - {producto_mas_barato['precio_unidad']}‚Ç¨")
    
    return productos_seleccionados

